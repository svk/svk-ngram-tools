(defun standard-conversion (string &key language)
  (declare (ignore language))
  (map 'simple-string (lambda (ch)
		 (case ch
		   (#\- #\_)
		   (#\? #\p)
		   (otherwise ch)))
       (symbol-name string)))

(defun load-dummylib (filename configuration-file)
  (load filename)
  (let ((conv (make-conversion #'standard-charmap)))
    (ff:def-foreign-call (dummylib-init "dummylib_init")
	((config-file (* :char)))
      :strings-convert t
      :returning :int)
    (ff:def-foreign-call (dummylib-quit "dummylib_quit")
	(:void)
      :returning :void)
    (ff:def-foreign-call (dummylib-dictionary "dummylib_dictionary")
	((word (* :char)))
      :strings-convert t
      :returning :int)
    (ff:def-foreign-call (dummylib-lookup-2gram "dummylib_lookup_2gram")
	((a :int) (b :int))
      :returning :unsigned-long)
    (ff:def-foreign-call (dummylib-lookup-3gram "dummylib_lookup_3gram")
	((a :int) (b :int) (c :int))
      :returning :unsigned-long)
    (ff:def-foreign-call (dummylib-lookup-4gram "dummylib_lookup_4gram")
	((a :int) (b :int) (c :int) (d :int))
      :returning :unsigned-long)
    (ff:def-foreign-call (dummylib-lookup-5gram "dummylib_lookup_5gram")
	((a :int) (b :int) (c :int) (d :int) (e :int))
      :returning :unsigned-long)
    (defun querying-function-for-n (n)
      (case n
	(2 #'dummylib-lookup-2gram)
	(3 #'dummylib-lookup-3gram)
	(4 #'dummylib-lookup-4gram)
	(5 #'dummylib-lookup-5gram)
	(otherwise (error "error: querying for unsupported n-gram length"))))
    (defun lookup-string-tuple (&rest strings)
      (apply (querying-function-for-n (length strings))
	       (mapcar #'dummylib-dictionary strings)))
    (defun lookup-integer-tuple (&rest integers)
      (apply (querying-function-for-n (length integers))
	     integers))
    (unless (eql 0
		 (dummylib-init configuration-file))
      (error (format t "error: unable to initialize dummylib with configuration \"~a\"" configuration-file)))))
